# -*- coding: utf-8 -*-
"""Prova2_Estrutura_De_Dados_Daniel_Franca.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B0e719OqZn_yNEHHnA8VuyWkBfWr_i4c

1 - Sua tarefa é montar um programa que o usuário escolhe se quer criar uma pilha , lista ou fila, após isso o programa pede  para usuário entrar com os números e cria uma pilha, lista ou fila.
"""

class No:

    def __init__(self, valor):
        self.valor = valor
        self.proximo = None
        self.anterior = None

    def mostra_no(self):
        print(self.valor)

class Fila:

    def __init__(self):
        self.primeiro = None
        self.ultimo = None

    def __lista_vazia(self):
        return self.primeiro == None

    def enfileirar(self, valor):
        novo = No(valor)
        if self.__lista_vazia():
            self.ultimo = novo
        else:
            self.primeiro.anterior = novo
        novo.proximo = self.primeiro
        self.primeiro = novo

    def desenfileirar(self):
        temp = self.ultimo
        if self.primeiro.proximo == None:
            self.primeiro = None
        else:
            self.ultimo.anterior.proximo = None
        self.ultimo = self.ultimo.anterior
        return temp

    def mostrar_fila(self):
        atual = self.primeiro
        while atual != None:
            atual.mostra_no()
            atual = atual.proximo


class ListaDuplamenteEncadeada:

    def __init__(self):
      self.primeiro = None
      self.ultimo = None

    def __lista_vazia(self):
      return self.primeiro == None

    def insere_inicio_lista(self, valor):
      novo = No(valor)
      if self.__lista_vazia():
        self.ultimo = novo
      else:
        self.primeiro.anterior = novo
      novo.proximo = self.primeiro
      self.primeiro = novo

    def insere_final_lista(self, valor):
      novo = No(valor)
      if self.__lista_vazia():
        self.primeiro = novo
      else:
        self.ultimo.proximo = novo
        novo.anterior = self.ultimo
      self.ultimo = novo

    def excluir_inicio_lista(self):
      temp = self.primeiro
      if self.primeiro.proximo == None:
        self.ultimo = None
      else:
        self.primeiro.proximo.anterior = None
      self.primeiro = self.primeiro.proximo
      return temp

    def excluir_final_lista(self):
      temp = self.ultimo
      if self.primeiro.proximo == None:
        self.primeiro = None
      else:
        self.ultimo.anterior.proximo = None
      self.ultimo = self.ultimo.anterior
      return temp

    def excluir_posicao_lista(self, valor):
      atual = self.primeiro
      while atual.valor != valor:
        atual = atual.proximo
        if atual == None:
          return None
      if atual == self.primeiro:
        self.primeiro = atual.proximo
      else:
        atual.anterior.proximo = atual.proximo

      if atual == self.ultimo:
        self.ultimo = atual.anterior
      else:
        atual.proximo.anterior = atual.anterior
      return atual

    def mostrar_frente_lista(self):
      atual = self.primeiro
      while atual != None:
        atual.mostra_no()
        atual = atual.proximo

    def mostrar_tras_lista(self):
      atual = self.ultimo
      while atual != None:
        atual.mostra_no()
        atual = atual.anterior

class Pilha:

    def __init__(self):
        self.primeiro = None
        self.ultimo = None

    def __lista_vazia(self):
        return self.primeiro == None


    def empilhar(self, valor):
        novo = No(valor)
        if self.__lista_vazia():
            self.primeiro = novo
        else:
            self.ultimo.proximo = novo
            novo.anterior = self.ultimo
        self.ultimo = novo

    def desempilhar(self):
        temp = self.ultimo
        if self.primeiro.proximo == None:
            self.primeiro = None
        else:
            self.ultimo.anterior.proximo = None
        self.ultimo = self.ultimo.anterior
        return temp

    def mostrar_pilha(self):
        atual = self.ultimo
        while atual != None:
            atual.mostra_no()
            atual = atual.anterior

# TRABALHANDO COM LIVROS

print("Você tem 5 livros, o que gostaria de fazer com eles ? ")
print("Empilhar em um canto do quarto ? (a)")
print("Enfileirar em uma estante da sala ? (b)")
print("Ou fazer uma lista para colocar num site a venda? (c)")

var = input("Digite o que quer fazer: ")
print()
if('a' == var ):
    livros = Pilha()

    for i in range(5):
        livro = input(f"Digite o nome do  {i+1}ª livro que vai empilhar: ")

        livros.empilhar(livro)

    print()
    print(livros.mostrar_pilha())
    print()
    print("Você decidiu que vai mudar esses livros de posição logo vai precisar desempilhar eles")
    print()

    for j in range(5):
        livros.desempilhar()
        print(livros.mostrar_pilha())
        print()

elif('b' == var):
    livros = Fila()


    for i in range(5):
        livro = input(f"Digite o {i+1}º livro que vai enfileirar na estante: ")

        livros.enfileirar(livro)
    print()
    print(livros.mostrar_fila())
    print()
    print("Você decidiu que vai ler seus livros na ordem que enfileirou!")
    print()

    for j in range(5):
        print("Você está lendo nessa ordem")
        print(livros.mostrar_fila())
        livros.desenfileirar()
        print()
elif('c' == var):
    livros = ListaDuplamenteEncadeada()
    soma = 0

    for i in range(5):
        livro = input(f"Digite o nome do {i+1}º livro que vai vender: ")
        preco = float(input("Digite o preço desse livro R$ "))
        livros.insere_inicio_lista(livro)
        soma += preco
    print()
    print("Essa e a lista de livros que você vai vender")
    print(livros.mostrar_tras_lista())
    print()
    print("Você começou a vender seus livros...")
    print()
    for j in range(5):
        print()
        print(f"Vendeu o {j+1} livro")
        livros.excluir_inicio_lista()
        print(livros.mostrar_tras_lista())

    print()

    print(f"O valor arrecadado com a venda dos livros é de R$ {soma} ")

else:

    print("Você digitou uma ação errada! ")

"""2 - criar um programa que remova duplicatas de uma pilha, lista ou pilha.

Por exemplo, dada a  5 -1 -1 -5 -7 -10 -10, seu programa deve retornar  5- 1- 7 - 10
"""

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:

    def __init__(self):
        self.head = None
        self._size = 0

    def append(self, elem):
        if self.head:

            pointer = self.head
            while pointer.next:
                pointer = pointer.next
            pointer.next = Node(elem)
        else:
            self.head = Node(elem)
        self._size = self._size + 1
    def __len__(self):
        return self._size
    def __getitem__(self, index):
        pointer = self.head
        for i in range(index):
            if pointer:
                pointer = pointer.next
            else:
                raise IndexError("list index out of range")
        if pointer:

            return pointer.data
        else:
            raise IndexError("list index out of range")

    def __setitem__(self, index, elem):
        pointer = self.head
        for i in range(index):
            if pointer:
                pointer = pointer.next
            else:
                raise IndexError("list index out of range")

        if pointer:
            pointer.data = elem
        else:
            raise IndexError("list index out of range")

    def index(self, elem):
        pointer = self.head
        i = 0
        while pointer:
            if pointer.data == elem:
                return i
            pointer = pointer.next
            i = i + 1
        raise IndexError("{} elemento não está na lista ")

lista = LinkedList()

for i in range(6):
    lista.append(int(input(f"Digite o {i+1} número: ")))

for j in range(6):
    print(lista.__getitem__(j))

lista_nova = []
for i in lista:
    if i not in lista_nova:
        lista_nova.append(i)

lista_nova.sort()

print(f" A lista sem valores repetidos é: {lista_nova}")